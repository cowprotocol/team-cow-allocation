{
  "address": "0x582A254713b65c140840ade25A692fBe2610682d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vcow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DurationMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HasClaimAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoClaimAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughVestedTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RevertedCowTransfer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "start",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "ClaimAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "ClaimRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "ClaimStopped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "start",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "addClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allocation",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "totalAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "claimedAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "start",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllCow",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "claimedAmount",
          "type": "uint96"
        }
      ],
      "name": "claimCow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "claimableCow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract ModuleController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cow",
      "outputs": [
        {
          "internalType": "contract CowProtocolToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "stopClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vcow",
      "outputs": [
        {
          "internalType": "contract CowProtocolVirtualToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ebb0dd5d3eebe9b5cb9c670f7e5cc1d6e8c4295caef6548e1e2c083060f0cc0",
  "receipt": {
    "to": null,
    "from": "0x254e0B8ce09b571dBCc6e6E1f55a0c057F26E710",
    "contractAddress": "0x582A254713b65c140840ade25A692fBe2610682d",
    "transactionIndex": 112,
    "gasUsed": "940085",
    "logsBloom": "0x
    "blockHash": "0xf5c3a7e692adddea4e750802a63f087f51356c00b6e952d47910c7b7cf1f3912",
    "transactionHash": "0x5ebb0dd5d3eebe9b5cb9c670f7e5cc1d6e8c4295caef6548e1e2c083060f0cc0",
    "logs": [],
    "blockNumber": 15049670,
    "cumulativeGasUsed": "9677288",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xca07EaA4253638D286caD71CBcEec11803F2709A",
    "0xD057B63f5E69CF1B929b356b579Cba08D7688048"
  ],
  "numDeployments": 1,
  "solcInputHash": "bcd8532b3dae86997a3aae16f3b66a58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vcow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DurationMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasClaimAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughVestedTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevertedCowTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"ClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"ClaimStopped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"addClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"totalAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimedAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllCow\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"claimedAmount\",\"type\":\"uint96\"}],\"name\":\"claimCow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimableCow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract ModuleController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cow\",\"outputs\":[{\"internalType\":\"contract CowProtocolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"stopClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcow\",\"outputs\":[{\"internalType\":\"contract CowProtocolVirtualToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CoW Protocol Developers\",\"details\":\"Gnosis Safe module used to distribute the Safe's vCOW allocation to other addresses. The module can add new target addresses that will be assigned a linear token allocation. Claims can be reedemed at any time by the target addresses and can be stopped at any time by the team controller.\",\"errors\":{\"DurationMustNotBeZero()\":[{\"details\":\"Thrown when creating a vesting position of zero duration.\"}],\"HasClaimAlready()\":[{\"details\":\"Thrown when creating a vesting position for an address that already has a vesting position.\"}],\"NoClaimAssigned()\":[{\"details\":\"Thrown when computing the amount of vested COW of an address that has no allocation.\"}],\"NotAController()\":[{\"details\":\"Thrown when executing a function that is reserved to the Gnosis Safe that controls this module.\"}],\"NotEnoughVestedTokens()\":[{\"details\":\"Thrown when a claimant tries to claim more COW tokens that the linear vesting allows at this point in time.\"}],\"RevertedCowTransfer()\":[{\"details\":\"Thrown when the transfer of COW tokens did not succeed.\"}]},\"events\":{\"ClaimAdded(address,uint32,uint32,uint96)\":{\"details\":\"A new linear vesting position is added to the module.\"},\"ClaimRedeemed(address,uint96)\":{\"details\":\"A claimant redeems an amount of COW tokens from its vesting position.\"},\"ClaimStopped(address)\":{\"details\":\"A vesting position is removed from the module.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(address,uint32,uint32,uint96)\":{\"details\":\"Allocates a vesting claim for COW tokens to an address.\",\"params\":{\"amount\":\"Amount of COW tokens that will be linearly vested to the beneficiary.\",\"beneficiary\":\"The address to which the new vesting claim will be assigned.\",\"duration\":\"How long it will take to the beneficiary to vest the entire amount of the claim.\"}},\"claimAllCow()\":{\"details\":\"Computes and sends the entire amount of COW that have been vested so far to the caller.\",\"returns\":{\"_0\":\"The amount of COW that has been claimed.\"}},\"claimCow(uint96)\":{\"details\":\"Sends the specified amount of COW to the caller, assuming enough COW has been vested so far.\"},\"claimableCow(address)\":{\"details\":\"Returns how many COW tokens are claimable at the current point in time by the given address. Tokens that were already claimed by the user are not included in the output amount.\",\"params\":{\"beneficiary\":\"The address that owns the claim.\"},\"returns\":{\"_0\":\"The amount of COW that could be claimed by the beneficiary at this point in time.\"}},\"stopClaim(address)\":{\"details\":\"Stops the claim of an address. It first claims the entire amount of COW allocated so far on behalf of the former beneficiary.\",\"params\":{\"beneficiary\":\"The address that will see its vesting position stopped.\"}}},\"stateVariables\":{\"MAX_UINT_32\":{\"details\":\"Maximum value that can be stored in the type uint32.00\"},\"allocation\":{\"details\":\"Maps each address to its vesting position. An address can have at most a single vesting position.\"},\"controller\":{\"details\":\"Gnosis Safe that will enable this module. Its vCOW claims will be used to pay out each target address.\"},\"cow\":{\"details\":\"The COW token.\"},\"vcow\":{\"details\":\"The virtual COW token.\"}},\"title\":\"COW Allocation Module\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/AllocationModule.sol\":\"AllocationModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/contracts/AllocationModule.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8;\\n\\nimport \\\"./interface/CowProtocolTokens.sol\\\";\\nimport \\\"./vendored/Enum.sol\\\";\\nimport \\\"./vendored/ModuleController.sol\\\";\\n\\n/// @dev Gnosis Safe module used to distribute the Safe's vCOW allocation to other addresses. The module can add new\\n/// target addresses that will be assigned a linear token allocation. Claims can be reedemed at any time by the target\\n/// addresses and can be stopped at any time by the team controller.\\n/// @title COW Allocation Module\\n/// @author CoW Protocol Developers\\ncontract AllocationModule {\\n    /// @dev Parameters that describe a linear vesting position for a claimant.\\n    struct VestingPosition {\\n        /// @dev Full amount of COW that is to be vested linearly in the designated time.\\n        uint96 totalAmount;\\n        /// @dev Amount of COW that the claimant has already redeemed so far.\\n        uint96 claimedAmount;\\n        /// @dev Timestamp when this vesting position started.\\n        uint32 start;\\n        /// @dev Timespan between vesting start and end.\\n        uint32 duration;\\n    }\\n\\n    /// @dev Gnosis Safe that will enable this module. Its vCOW claims will be used to pay out each target address.\\n    ModuleController public immutable controller;\\n    /// @dev The COW token.\\n    CowProtocolToken public immutable cow;\\n    /// @dev The virtual COW token.\\n    CowProtocolVirtualToken public immutable vcow;\\n    /// @dev Maps each address to its vesting position. An address can have at most a single vesting position.\\n    mapping(address => VestingPosition) public allocation;\\n\\n    /// @dev Maximum value that can be stored in the type uint32.00\\n    uint256 private constant MAX_UINT_32 = (1 << (32)) - 1;\\n\\n    /// @dev Thrown when creating a vesting position of zero duration.\\n    error DurationMustNotBeZero();\\n    /// @dev Thrown when creating a vesting position for an address that already has a vesting position.\\n    error HasClaimAlready();\\n    /// @dev Thrown when computing the amount of vested COW of an address that has no allocation.\\n    error NoClaimAssigned();\\n    /// @dev Thrown when executing a function that is reserved to the Gnosis Safe that controls this module.\\n    error NotAController();\\n    /// @dev Thrown when a claimant tries to claim more COW tokens that the linear vesting allows at this point in time.\\n    error NotEnoughVestedTokens();\\n    /// @dev Thrown when the transfer of COW tokens did not succeed.\\n    error RevertedCowTransfer();\\n\\n    /// @dev A new linear vesting position is added to the module.\\n    event ClaimAdded(\\n        address indexed beneficiary,\\n        uint32 start,\\n        uint32 duration,\\n        uint96 amount\\n    );\\n    /// @dev A vesting position is removed from the module.\\n    event ClaimStopped(address indexed beneficiary);\\n    /// @dev A claimant redeems an amount of COW tokens from its vesting position.\\n    event ClaimRedeemed(address indexed beneficiary, uint96 amount);\\n\\n    /// @dev Restrict the message caller to be the controller of this module.\\n    modifier onlyController() {\\n        if (msg.sender != address(controller)) {\\n            revert NotAController();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _controller, address _vcow) {\\n        controller = ModuleController(_controller);\\n        vcow = CowProtocolVirtualToken(_vcow);\\n        cow = CowProtocolToken(address(vcow.cowToken()));\\n    }\\n\\n    /// @dev Allocates a vesting claim for COW tokens to an address.\\n    /// @param beneficiary The address to which the new vesting claim will be assigned.\\n    /// @param duration How long it will take to the beneficiary to vest the entire amount of the claim.\\n    /// @param amount Amount of COW tokens that will be linearly vested to the beneficiary.\\n    function addClaim(\\n        address beneficiary,\\n        uint32 start,\\n        uint32 duration,\\n        uint96 amount\\n    ) external onlyController {\\n        if (duration == 0) {\\n            revert DurationMustNotBeZero();\\n        }\\n        if (allocation[beneficiary].totalAmount != 0) {\\n            revert HasClaimAlready();\\n        }\\n        allocation[beneficiary] = VestingPosition({\\n            totalAmount: amount,\\n            claimedAmount: 0,\\n            start: start,\\n            duration: duration\\n        });\\n\\n        emit ClaimAdded(beneficiary, start, duration, amount);\\n    }\\n\\n    /// @dev Stops the claim of an address. It first claims the entire amount of COW allocated so far on behalf of the\\n    /// former beneficiary.\\n    /// @param beneficiary The address that will see its vesting position stopped.\\n    function stopClaim(address beneficiary) external onlyController {\\n        // Note: claiming COW might fail, therefore making it impossible to stop the claim. This is not considered an\\n        // issue as a claiming failure can only occur in the following cases:\\n        // 1. No claim is available: then nothing needs to be stopped.\\n        // 2. This module is no longer enabled in the controller.\\n        // 3. The COW transfer reverts. This means that there weren't enough vCOW tokens to swap for COW and that there\\n        // aren't enough COW tokens available in the controller. Sending COW tokens to pay out the remaining claim would\\n        // allow to stop the claim.\\n        // 4. Math failures (overflow/underflows). No untrusted value is provided to this function, so this is not\\n        // expected to happen.\\n        // solhint-disable-next-line not-rely-on-time\\n        _claimAllCow(beneficiary, block.timestamp);\\n\\n        delete allocation[beneficiary];\\n\\n        emit ClaimStopped(beneficiary);\\n    }\\n\\n    /// @dev Computes and sends the entire amount of COW that have been vested so far to the caller.\\n    /// @return The amount of COW that has been claimed.\\n    function claimAllCow() external returns (uint96) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return _claimAllCow(msg.sender, block.timestamp);\\n    }\\n\\n    /// @dev Sends the specified amount of COW to the caller, assuming enough COW has been vested so far.\\n    function claimCow(uint96 claimedAmount) external {\\n        address beneficiary = msg.sender;\\n\\n        (uint96 alreadyClaimedAmount, uint96 fullVestedAmount) = retrieveClaimedAmounts(\\n            beneficiary,\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp\\n        );\\n\\n        claimCowFromAmounts(\\n            beneficiary,\\n            claimedAmount,\\n            alreadyClaimedAmount,\\n            fullVestedAmount\\n        );\\n    }\\n\\n    /// @dev Returns how many COW tokens are claimable at the current point in time by the given address. Tokens that\\n    /// were already claimed by the user are not included in the output amount.\\n    /// @param beneficiary The address that owns the claim.\\n    /// @return The amount of COW that could be claimed by the beneficiary at this point in time.\\n    function claimableCow(address beneficiary) external view returns (uint256) {\\n        if (allocation[beneficiary].totalAmount == 0) {\\n            return 0;\\n        }\\n        (uint96 alreadyClaimedAmount, uint96 fullVestedAmount) = retrieveClaimedAmounts(\\n            beneficiary,\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp\\n        );\\n\\n        return fullVestedAmount - alreadyClaimedAmount;\\n    }\\n\\n    /// @dev Computes and sends the entire amount of COW that have been vested so far to the beneficiary.\\n    /// @param beneficiary The address that redeems its claim.\\n    /// @param timestampAtClaimingTime The timestamp at claiming time.\\n    /// @return claimedAmount The amount of COW that has been claimed.\\n    function _claimAllCow(address beneficiary, uint256 timestampAtClaimingTime)\\n        internal\\n        returns (uint96 claimedAmount)\\n    {\\n        (\\n            uint96 alreadyClaimedAmount,\\n            uint96 fullVestedAmount\\n        ) = retrieveClaimedAmounts(beneficiary, timestampAtClaimingTime);\\n\\n        claimedAmount = fullVestedAmount - alreadyClaimedAmount;\\n        claimCowFromAmounts(\\n            beneficiary,\\n            claimedAmount,\\n            alreadyClaimedAmount,\\n            fullVestedAmount\\n        );\\n    }\\n\\n    /// @dev Computes some values related to a vesting position: how much can be claimed at the specified point in time\\n    /// and how much has already been claimed.\\n    /// @param beneficiary The address that is assigned the vesting position to consider.\\n    /// @param timestampAtClaimingTime The timestamp at claiming time.\\n    /// @return alreadyClaimedAmount How much of the vesting position has already been claimed.\\n    /// @return fullVestedAmount How much of the vesting position has been vested at the specified point in time. This\\n    /// amount does not exclude the amount that has already been claimed.\\n    function retrieveClaimedAmounts(\\n        address beneficiary,\\n        uint256 timestampAtClaimingTime\\n    )\\n        internal\\n        view\\n        returns (uint96 alreadyClaimedAmount, uint96 fullVestedAmount)\\n    {\\n        // Destructure caller position as gas efficiently as possible without assembly.\\n        VestingPosition memory position = allocation[beneficiary];\\n        uint96 totalAmount = position.totalAmount;\\n        alreadyClaimedAmount = position.claimedAmount;\\n        uint32 start = position.start;\\n        uint32 duration = position.duration;\\n\\n        if (totalAmount == 0) {\\n            revert NoClaimAssigned();\\n        }\\n\\n        fullVestedAmount = computeClaimableAmount(\\n            start,\\n            timestampAtClaimingTime,\\n            duration,\\n            totalAmount\\n        );\\n    }\\n\\n    /// Given the parameters of a vesting position, computes how much of the total amount has been vested so far.\\n    /// @param start Timestamp when the vesting position was started.\\n    /// @param current Timestamp of the point in time when the vested amount should be computed.\\n    /// @param duration How long it takes for this vesting position to be fully vested.\\n    /// @param totalAmount The total amount that is being vested.\\n    /// @return The amount that has been vested at the specified point in time.\\n    function computeClaimableAmount(\\n        uint32 start,\\n        uint256 current,\\n        uint32 duration,\\n        uint96 totalAmount\\n    ) internal pure returns (uint96) {\\n        if (current <= start) {\\n            return 0;\\n        }\\n        uint256 elapsedTime = current - start;\\n        if (elapsedTime >= duration) {\\n            return totalAmount;\\n        }\\n        return uint96((uint256(totalAmount) * elapsedTime) / duration);\\n    }\\n\\n    /// @dev Takes the parameters of a vesting position from its input values and sends out the claimed COW to the\\n    /// beneficiary, taking care of updating the claimed amount.\\n    /// @param beneficiary The address that should receive the COW tokens.\\n    /// @param amount The amount of COW that is claimed by the beneficiary.\\n    /// @param alreadyClaimedAmount The amount that has already been claimed by the beneficiary.\\n    /// @param fullVestedAmount The total amount of COW that has been vested so far, which includes the amount that\\n    /// was already claimed.\\n    function claimCowFromAmounts(\\n        address beneficiary,\\n        uint96 amount,\\n        uint96 alreadyClaimedAmount,\\n        uint96 fullVestedAmount\\n    ) internal {\\n        uint96 claimedAfterPayout = alreadyClaimedAmount + amount;\\n        if (claimedAfterPayout > fullVestedAmount) {\\n            revert NotEnoughVestedTokens();\\n        }\\n\\n        allocation[beneficiary].claimedAmount = claimedAfterPayout;\\n        swapVcowIfAvailable(amount);\\n        transferCow(beneficiary, amount);\\n\\n        emit ClaimRedeemed(beneficiary, amount);\\n    }\\n\\n    /// @dev Swaps an exact amount of vCOW tokens that are held in the module controller in exchange for COW tokens. The\\n    /// COW tokens are left in the module controller. If swapping reverts (which means that not enough vCOW are\\n    /// available) then the failure is ignored.\\n    /// @param amount The amount of vCOW to swap.\\n    function swapVcowIfAvailable(uint256 amount) internal {\\n        // The success status is explicitely ignored. This means that the call to `swap` could revert without reverting\\n        // the execution of this function. Note that this function can still revert if the call to\\n        // `execTransactionFromModule` reverts, which could happen for example if this module is no longer enabled in\\n        // the controller.\\n        //bool success =\\n        controller.execTransactionFromModule(\\n            address(vcow),\\n            0,\\n            abi.encodeWithSelector(vcow.swap.selector, amount),\\n            Enum.Operation.Call\\n        );\\n    }\\n\\n    /// @dev Transfer the specified exact amount of COW tokens that are held in the module controller to the target.\\n    /// @param to The address that will receive transfer.\\n    /// @param amount The amount of COW to transfer.\\n    function transferCow(address to, uint256 amount) internal {\\n        // Note: the COW token reverts on failed transfer, there is no need to check the return value.\\n        bool success = controller.execTransactionFromModule(\\n            address(cow),\\n            0,\\n            abi.encodeWithSelector(cow.transfer.selector, to, amount),\\n            Enum.Operation.Call\\n        );\\n        if (!success) {\\n            revert RevertedCowTransfer();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8dd406a249ac23438c9244645ee1af71e27b4f11440e28eefa1a3b5ae97e7ea4\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/interface/CowProtocolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8;\\n\\n/// @dev Interface exposing some of the functions of the governance token for the CoW Protocol.\\n/// @title CoW Protocol Governance Token Minimal Interface\\n/// @author CoW Protocol Developers\\ninterface CowProtocolToken {\\n    /// @dev Moves `amount` tokens from the caller's account to `to`.\\n    /// Returns true. Reverts if the operation didn't succeed.\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\n/// @dev Interface exposing some of the functions of the virtual token for the CoW Protocol.\\n/// @title CoW Protocol Virtual Token Minimal Interface\\n/// @author CoW Protocol Developers\\ninterface CowProtocolVirtualToken {\\n    /// @dev Converts an amount of (virtual) tokens from this contract to real\\n    /// tokens based on the claims previously performed by the caller.\\n    /// @param amount How many virtual tokens to convert into real tokens.\\n    function swap(uint256 amount) external;\\n\\n    /// @dev Address of the real COW token. Tokens claimed by this contract can\\n    /// be converted to this token if this contract stores some balance of it.\\n    function cowToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4ea69d1e0c2f0679838726ae333de1a4e2080ba9d8c3179e5e93a75e45ad8f07\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/vendored/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n// Vendored from @gnosis.pm/safe-contracts v1.3.0, see:\\n// <https://raw.githubusercontent.com/gnosis/safe-contracts/v1.3.0/contracts/common/Enum.sol>\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x869b8c9c049252b70640f8aaf3c10be22e891f02e651af70614d01ebffd67cf7\",\"license\":\"LGPL-3.0-only\"},\"src/contracts/vendored/ModuleController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n// A contract interface listing the functions that are exposed by a Gnosis Safe v1.3 to work with modules.\\n// Vendored from @gnosis.pm/zodiac v1.0.6, see:\\n// <https://raw.githubusercontent.com/gnosis/zodiac/d9b1180436609f6c0a1fc93009d9c28d214fd971/contracts/interfaces/IAvatar.sol>\\n// Changes:\\n// - Renamed contract to `ModuleController` to make the interface purpose clearer when imported.\\n// - Vendored imports.\\n\\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./Enum.sol\\\";\\n\\ninterface ModuleController {\\n    /// @dev Enables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Modules should be stored as a linked list.\\n    /// @notice Must emit EnabledModule(address module) if successful.\\n    /// @param module Module to be enabled.\\n    function enableModule(address module) external;\\n\\n    /// @dev Disables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Must emit DisabledModule(address module) if successful.\\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a transaction.\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a transaction and return data\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0xbba4004a96be4502401581d1e863b80d43d723cce3a3ca49271d044e52d1e2fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b7d1d98e11610076578063ca897ae91161005b578063ca897ae91461021b578063dfbf306d14610240578063f77c47911461026757600080fd5b8063b7d1d98e14610142578063b81b86301461015557600080fd5b806302a861a6146100a85780630bfe7272146100bd5780635efb00681461010e5780636d15757f1461012f575b600080fd5b6100bb6100b6366004610d25565b61028e565b005b6100e47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61012161011c366004610d79565b610545565b604051908152602001610105565b6100bb61013d366004610d9b565b6105b9565b6100bb610150366004610d79565b6105dd565b6101df610163366004610d79565b6000602081905290815260409020546bffffffffffffffffffffffff808216916c0100000000000000000000000081049091169063ffffffff780100000000000000000000000000000000000000000000000082048116917c010000000000000000000000000000000000000000000000000000000090041684565b604080516bffffffffffffffffffffffff958616815294909316602085015263ffffffff91821692840192909252166060820152608001610105565b6102236106a8565b6040516bffffffffffffffffffffffff9091168152602001610105565b6100e47f000000000000000000000000000000000000000000000000000000000000000081565b6100e47f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102fd576040517f49c7ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8163ffffffff1660000361033d576040517f8aa5307300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152602081905260409020546bffffffffffffffffffffffff16156103a8576040517f323b56dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516080810182526bffffffffffffffffffffffff80841682526000602080840182815263ffffffff808a168688019081528982166060880190815273ffffffffffffffffffffffffffffffffffffffff8d1680875294869052948890209651875493519151955183167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff969093167801000000000000000000000000000000000000000000000000029590951677ffffffffffffffffffffffffffffffffffffffffffffffff9187166c01000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090941695909616949094179190911792909216929092171790915590517f62e858454929ce9f384f9d82157102395986004b15e120e599dfbe4750840fed906105379086908690869063ffffffff93841681529190921660208201526bffffffffffffffffffffffff91909116604082015260600190565b60405180910390a250505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260408120546bffffffffffffffffffffffff16810361058757506000919050565b60008061059484426106b9565b90925090506105a38282610de5565b6bffffffffffffffffffffffff16949350505050565b336000806105c783426106b9565b915091506105d7838584846107c2565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461064c576040517f49c7ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106568142610919565b5073ffffffffffffffffffffffffffffffffffffffff8116600081815260208190526040808220829055517f54ffd930243d4bbe8c7376397313084a0db6125385a680dba7e9e2c175bc66d89190a250565b60006106b43342610919565b905090565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208181526040808320815160808101835290546bffffffffffffffffffffffff8082168084526c01000000000000000000000000830490911694830185905263ffffffff7801000000000000000000000000000000000000000000000000830481169484018590527c010000000000000000000000000000000000000000000000000000000090920490911660608301819052939493919290918285036107a9576040517f21b209cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107b58288838661094d565b9450505050509250929050565b60006107ce8484610e12565b9050816bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115610826576040517f12c1eee000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902080546bffffffffffffffffffffffff8084166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179091556108a29085166109c3565b6108ba85856bffffffffffffffffffffffff16610b19565b6040516bffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff8616907eabd6453401982d5175fd80db2de15caf30c005b22dea08caa98645a92c6e759060200160405180910390a25050505050565b600080600061092885856106b9565b90925090506109378282610de5565b9250610945858484846107c2565b505092915050565b60008463ffffffff168411610964575060006109bb565b600061097663ffffffff871686610e42565b90508363ffffffff16811061098e57829150506109bb565b63ffffffff84166109ad826bffffffffffffffffffffffff8616610e59565b6109b79190610e96565b9150505b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663468721a77f000000000000000000000000000000000000000000000000000000000000000060006394b918de60e01b85604051602401610a3d91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e086901b9092168252610ad2939291600090600401610f0c565b6020604051808303816000875af1158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190610fb3565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663468721a77f0000000000000000000000000000000000000000000000000000000000000000600063a9059cbb60e01b8787604051602401610bb692919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e086901b9092168252610c4b939291600090600401610f0c565b6020604051808303816000875af1158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e9190610fb3565b905080610cc7576040517f7f689fa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610cf057600080fd5b919050565b803563ffffffff81168114610cf057600080fd5b80356bffffffffffffffffffffffff81168114610cf057600080fd5b60008060008060808587031215610d3b57600080fd5b610d4485610ccc565b9350610d5260208601610cf5565b9250610d6060408601610cf5565b9150610d6e60608601610d09565b905092959194509250565b600060208284031215610d8b57600080fd5b610d9482610ccc565b9392505050565b600060208284031215610dad57600080fd5b610d9482610d09565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006bffffffffffffffffffffffff83811690831681811015610e0a57610e0a610db6565b039392505050565b60006bffffffffffffffffffffffff808316818516808303821115610e3957610e39610db6565b01949350505050565b600082821015610e5457610e54610db6565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9157610e91610db6565b500290565b600082610ecc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60028110610f08577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015260806040840152845180608085015260005b81811015610f5c5786810183015185820160a001528201610f40565b81811115610f6e57600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016830160a0019150610faa90506060830184610ed1565b95945050505050565b600060208284031215610fc557600080fd5b81518015158114610d9457600080fdfea2646970667358221220fbd0fefbaff59f1f70aef91cccc85569daa0ad680452c8f611265dd02617808764736f6c634300080d0033",
  "devdoc": {
    "author": "CoW Protocol Developers",
    "details": "Gnosis Safe module used to distribute the Safe's vCOW allocation to other addresses. The module can add new target addresses that will be assigned a linear token allocation. Claims can be reedemed at any time by the target addresses and can be stopped at any time by the team controller.",
    "errors": {
      "DurationMustNotBeZero()": [
        {
          "details": "Thrown when creating a vesting position of zero duration."
        }
      ],
      "HasClaimAlready()": [
        {
          "details": "Thrown when creating a vesting position for an address that already has a vesting position."
        }
      ],
      "NoClaimAssigned()": [
        {
          "details": "Thrown when computing the amount of vested COW of an address that has no allocation."
        }
      ],
      "NotAController()": [
        {
          "details": "Thrown when executing a function that is reserved to the Gnosis Safe that controls this module."
        }
      ],
      "NotEnoughVestedTokens()": [
        {
          "details": "Thrown when a claimant tries to claim more COW tokens that the linear vesting allows at this point in time."
        }
      ],
      "RevertedCowTransfer()": [
        {
          "details": "Thrown when the transfer of COW tokens did not succeed."
        }
      ]
    },
    "events": {
      "ClaimAdded(address,uint32,uint32,uint96)": {
        "details": "A new linear vesting position is added to the module."
      },
      "ClaimRedeemed(address,uint96)": {
        "details": "A claimant redeems an amount of COW tokens from its vesting position."
      },
      "ClaimStopped(address)": {
        "details": "A vesting position is removed from the module."
      }
    },
    "kind": "dev",
    "methods": {
      "addClaim(address,uint32,uint32,uint96)": {
        "details": "Allocates a vesting claim for COW tokens to an address.",
        "params": {
          "amount": "Amount of COW tokens that will be linearly vested to the beneficiary.",
          "beneficiary": "The address to which the new vesting claim will be assigned.",
          "duration": "How long it will take to the beneficiary to vest the entire amount of the claim."
        }
      },
      "claimAllCow()": {
        "details": "Computes and sends the entire amount of COW that have been vested so far to the caller.",
        "returns": {
          "_0": "The amount of COW that has been claimed."
        }
      },
      "claimCow(uint96)": {
        "details": "Sends the specified amount of COW to the caller, assuming enough COW has been vested so far."
      },
      "claimableCow(address)": {
        "details": "Returns how many COW tokens are claimable at the current point in time by the given address. Tokens that were already claimed by the user are not included in the output amount.",
        "params": {
          "beneficiary": "The address that owns the claim."
        },
        "returns": {
          "_0": "The amount of COW that could be claimed by the beneficiary at this point in time."
        }
      },
      "stopClaim(address)": {
        "details": "Stops the claim of an address. It first claims the entire amount of COW allocated so far on behalf of the former beneficiary.",
        "params": {
          "beneficiary": "The address that will see its vesting position stopped."
        }
      }
    },
    "stateVariables": {
      "MAX_UINT_32": {
        "details": "Maximum value that can be stored in the type uint32.00"
      },
      "allocation": {
        "details": "Maps each address to its vesting position. An address can have at most a single vesting position."
      },
      "controller": {
        "details": "Gnosis Safe that will enable this module. Its vCOW claims will be used to pay out each target address."
      },
      "cow": {
        "details": "The COW token."
      },
      "vcow": {
        "details": "The virtual COW token."
      }
    },
    "title": "COW Allocation Module",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36,
        "contract": "src/contracts/AllocationModule.sol:AllocationModule",
        "label": "allocation",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(VestingPosition)18_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(VestingPosition)18_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AllocationModule.VestingPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingPosition)18_storage"
      },
      "t_struct(VestingPosition)18_storage": {
        "encoding": "inplace",
        "label": "struct AllocationModule.VestingPosition",
        "members": [
          {
            "astId": 8,
            "contract": "src/contracts/AllocationModule.sol:AllocationModule",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 11,
            "contract": "src/contracts/AllocationModule.sol:AllocationModule",
            "label": "claimedAmount",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 14,
            "contract": "src/contracts/AllocationModule.sol:AllocationModule",
            "label": "start",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17,
            "contract": "src/contracts/AllocationModule.sol:AllocationModule",
            "label": "duration",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}